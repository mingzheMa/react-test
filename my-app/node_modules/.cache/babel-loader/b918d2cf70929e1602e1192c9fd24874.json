{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marx/Downloads/react-test/practice/react/my-app/src/components/Context/index.js\";\n// 16.x版本以前使用的api\nimport React, { Component } from \"react\";\nimport PT from \"prop-types\";\nconst contextType = {\n  a: PT.number,\n  b: PT.string.isRequired,\n  add: PT.func.isRequired\n}; // 当组件A也有自己的上下文并且变量a与组件Context上下文中的a重复时，B组件访问上下文会从最近的一个上下文中获取变量，当B调用add方法时，会顺着上下文找到Context上下文中的add方法，修改了Context上下文中的a，所以组件A上下文中的a并没有变化\n\nclass A extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      a: 888,\n      c: false\n    };\n  }\n\n  getChildContext() {\n    return {\n      a: this.state.a,\n      c: this.state.c\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"\\u7EC4\\u4EF6A a:\", this.getChildContext().a, \"c:\", this.getChildContext().c, /*#__PURE__*/_jsxDEV(B, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nA.contextTypes = contextType;\nA.childContextTypes = {\n  a: PT.number,\n  c: PT.bool\n};\n\nfunction B(props, context) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"a\\uFF1A\", context.a]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"b\\uFF1A\", context.b]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        context.add({\n          a: context.a + 1,\n          b: context.b + 2\n        });\n      },\n      children: \"a\\u52A01 b\\u52A02\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_c = B;\nB.contextTypes = contextType;\nexport default class Context extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      a: 123,\n      b: \"345\"\n    };\n  }\n\n  getChildContext() {\n    return {\n      a: this.state.a,\n      b: this.state.b,\n      add: state => {\n        this.setState(state);\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(A, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nContext.childContextTypes = contextType;\n\nvar _c;\n\n$RefreshReg$(_c, \"B\");","map":{"version":3,"sources":["/Users/marx/Downloads/react-test/practice/react/my-app/src/components/Context/index.js"],"names":["React","Component","PT","contextType","a","number","b","string","isRequired","add","func","A","state","c","getChildContext","render","contextTypes","childContextTypes","bool","B","props","context","Context","setState"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,CAAC,EAAEF,EAAE,CAACG,MADY;AAElBC,EAAAA,CAAC,EAAEJ,EAAE,CAACK,MAAH,CAAUC,UAFK;AAGlBC,EAAAA,GAAG,EAAEP,EAAE,CAACQ,IAAH,CAAQF;AAHK,CAApB,C,CAMA;;AACA,MAAMG,CAAN,SAAgBV,SAAhB,CAA0B;AAAA;AAAA;AAAA,SAGxBW,KAHwB,GAGhB;AACNR,MAAAA,CAAC,EAAE,GADG;AAENS,MAAAA,CAAC,EAAE;AAFG,KAHgB;AAAA;;AAaxBC,EAAAA,eAAe,GAAG;AAChB,WAAO;AACLV,MAAAA,CAAC,EAAE,KAAKQ,KAAL,CAAWR,CADT;AAELS,MAAAA,CAAC,EAAE,KAAKD,KAAL,CAAWC;AAFT,KAAP;AAID;;AAEDE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,qCACS,KAAKD,eAAL,GAAuBV,CADhC,QAEK,KAAKU,eAAL,GAAuBD,CAF5B,eAGE,QAAC,CAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA,oBADF;AAOD;;AA5BuB;;AAApBF,C,CACGK,Y,GAAeb,W;AADlBQ,C,CAQGM,iB,GAAoB;AACzBb,EAAAA,CAAC,EAAEF,EAAE,CAACG,MADmB;AAEzBQ,EAAAA,CAAC,EAAEX,EAAE,CAACgB;AAFmB,C;;AAuB7B,SAASC,CAAT,CAAWC,KAAX,EAAkBC,OAAlB,EAA2B;AACzB,sBACE;AAAA,4BACE;AAAA,4BAAMA,OAAO,CAACjB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,4BAAMiB,OAAO,CAACf,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE;AACE,MAAA,OAAO,EAAE,MAAM;AACbe,QAAAA,OAAO,CAACZ,GAAR,CAAY;AACVL,UAAAA,CAAC,EAAEiB,OAAO,CAACjB,CAAR,GAAY,CADL;AAEVE,UAAAA,CAAC,EAAEe,OAAO,CAACf,CAAR,GAAY;AAFL,SAAZ;AAID,OANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAgBD;;KAjBQa,C;AAmBTA,CAAC,CAACH,YAAF,GAAiBb,WAAjB;AAEA,eAAe,MAAMmB,OAAN,SAAsBrB,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC7CW,KAD6C,GACrC;AACNR,MAAAA,CAAC,EAAE,GADG;AAENE,MAAAA,CAAC,EAAE;AAFG,KADqC;AAAA;;AAQ7CQ,EAAAA,eAAe,GAAG;AAChB,WAAO;AACLV,MAAAA,CAAC,EAAE,KAAKQ,KAAL,CAAWR,CADT;AAELE,MAAAA,CAAC,EAAE,KAAKM,KAAL,CAAWN,CAFT;AAGLG,MAAAA,GAAG,EAAEG,KAAK,IAAI;AACZ,aAAKW,QAAL,CAAcX,KAAd;AACD;AALI,KAAP;AAOD;;AAEDG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE,QAAC,CAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAxB4C;AAA1BO,O,CAMZL,iB,GAAoBd,W","sourcesContent":["// 16.x版本以前使用的api\nimport React, { Component } from \"react\";\nimport PT from \"prop-types\";\n\nconst contextType = {\n  a: PT.number,\n  b: PT.string.isRequired,\n  add: PT.func.isRequired\n};\n\n// 当组件A也有自己的上下文并且变量a与组件Context上下文中的a重复时，B组件访问上下文会从最近的一个上下文中获取变量，当B调用add方法时，会顺着上下文找到Context上下文中的add方法，修改了Context上下文中的a，所以组件A上下文中的a并没有变化\nclass A extends Component {\n  static contextTypes = contextType;\n\n  state = {\n    a: 888,\n    c: false\n  };\n\n  static childContextTypes = {\n    a: PT.number,\n    c: PT.bool\n  };\n\n  getChildContext() {\n    return {\n      a: this.state.a,\n      c: this.state.c\n    };\n  }\n\n  render() {\n    return (\n      <>\n        组件A a:{this.getChildContext().a}\n        c:{this.getChildContext().c}\n        <B />\n      </>\n    );\n  }\n}\n\nfunction B(props, context) {\n  return (\n    <>\n      <p>a：{context.a}</p>\n      <p>b：{context.b}</p>\n\n      <button\n        onClick={() => {\n          context.add({\n            a: context.a + 1,\n            b: context.b + 2\n          });\n        }}>\n        a加1 b加2\n      </button>\n    </>\n  );\n}\n\nB.contextTypes = contextType;\n\nexport default class Context extends Component {\n  state = {\n    a: 123,\n    b: \"345\"\n  };\n\n  static childContextTypes = contextType;\n\n  getChildContext() {\n    return {\n      a: this.state.a,\n      b: this.state.b,\n      add: state => {\n        this.setState(state);\n      }\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <A />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}