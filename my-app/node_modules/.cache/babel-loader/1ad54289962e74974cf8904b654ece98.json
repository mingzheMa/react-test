{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marx/Downloads/react-test/practice/react/my-app/src/components/State.js\";\nimport React, { Component } from \"react\";\nexport default class State extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      n: 0\n    };\n\n    this.add = () => {\n      // 多次调用只执行一次，会合并setState\n      // this.setState({\n      //   n: this.state.n + 1\n      // });\n      // this.setState({\n      //   n: this.state.n + 1\n      // });\n      // this.setState({\n      //   n: this.state.n + 1\n      // });\n      // 回调中渲染多次浪费性能\n      // this.setState(\n      //   {\n      //     n: this.state.n + 1\n      //   },\n      //   () => {\n      //     this.setState(\n      //       {\n      //         n: this.state.n + 1\n      //       },\n      //       () => {\n      //         this.setState({\n      //           n: this.state.n + 1\n      //         });\n      //       }\n      //     );\n      //   }\n      // );\n      // 传入函数可以setState执行多次，函数参数为处理后的state，多次调用不会合并setState\n      // this.setState(s => ({\n      //   n: s.n + 1\n      // }));\n      // this.setState(s => ({\n      //   n: s.n + 1\n      // }));\n      // this.setState(s => ({\n      //   n: s.n + 1\n      // }));\n      this.setState({\n        n: this.state.n + 1\n      });\n      console.log(this.state);\n    };\n  }\n\n  render() {\n    console.log(this.state);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"n\\uFF1A\", this.state.n]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.add,\n        children: \"n+1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/marx/Downloads/react-test/practice/react/my-app/src/components/State.js"],"names":["React","Component","State","state","n","add","setState","console","log","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,KAAN,SAAoBD,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC3CE,KAD2C,GACnC;AACNC,MAAAA,CAAC,EAAE;AADG,KADmC;;AAAA,SAK3CC,GAL2C,GAKrC,MAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,WAAKC,QAAL,CAAc;AACVF,QAAAA,CAAC,EAAC,KAAKD,KAAL,CAAWC,CAAX,GAAe;AADP,OAAd;AAIAG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;AACD,KApD0C;AAAA;;AAsD3CM,EAAAA,MAAM,GAAG;AACPF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;AACA,wBACE;AAAA,8BACE;AAAA,8BAAM,KAAKA,KAAL,CAAWC,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,KAAKC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AA9D0C","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class State extends Component {\n  state = {\n    n: 0\n  };\n\n  add = () => {\n    // 多次调用只执行一次，会合并setState\n    // this.setState({\n    //   n: this.state.n + 1\n    // });\n    // this.setState({\n    //   n: this.state.n + 1\n    // });\n    // this.setState({\n    //   n: this.state.n + 1\n    // });\n    \n    // 回调中渲染多次浪费性能\n    // this.setState(\n    //   {\n    //     n: this.state.n + 1\n    //   },\n    //   () => {\n    //     this.setState(\n    //       {\n    //         n: this.state.n + 1\n    //       },\n    //       () => {\n    //         this.setState({\n    //           n: this.state.n + 1\n    //         });\n    //       }\n    //     );\n    //   }\n    // );\n\n    // 传入函数可以setState执行多次，函数参数为处理后的state，多次调用不会合并setState\n    // this.setState(s => ({\n    //   n: s.n + 1\n    // }));\n    // this.setState(s => ({\n    //   n: s.n + 1\n    // }));\n    // this.setState(s => ({\n    //   n: s.n + 1\n    // }));\n\n    this.setState({\n        n:this.state.n + 1\n    })\n\n    console.log(this.state)\n  };\n\n  render() {\n    console.log(this.state);\n    return (\n      <div>\n        <p>n：{this.state.n}</p>\n        <button onClick={this.add}>n+1</button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}